@page "/workouts/edit/{id:long}"
@inherits OwningComponentBase<IWorkoutRepository>
@inject NavigationManager NavigationManager

<CascadingValue Value="this">
    <ExerciseFormComponent @ref="Modal" Id="@Id"></ExerciseFormComponent>
</CascadingValue>

<div class="container">
    <table class="table table-bordered table-hover" ondragover="event.preventDefault();">
        <thead>
            <tr>
                <td class="col-1"></td>
                <td>
                    <p>
                        <span class="font-weight-bold h3">@workout.Name</span>
                        <span class="float-right h6">
                            <select class="form-control" @onchange="@changeDay">
                                @if (days?.Count() > 0)
                                {
                                    @foreach (Day d in days)
                                    {
                                        @if (d.DayID == day.DayID)
                                        {
                                            <option value="@d.DayID" selected="selected">@d.Name</option>
                                        }
                                        else
                                        {
                                            <option value="@d.DayID">@d.Name</option>
                                        }
                                    }
                                }
                                else
                                {
                                    <option>Loading</option>
                                }
                            </select>
                        </span> 
                    </p>
                </td>
                <td class="col-1"></td>
            </tr>
        </thead>

        <tbody>
            @if (Workout_ExerciseData?.Count() > 0)
            {
                @foreach (var we in Workout_ExerciseData)
                {
                    <tr draggable="true" @key="we.ExerciseNum" @ondrop="@(() => Drop(we))" @ondrag="@(() => StartDrag(we))">
                        <td>@we.ExerciseNum</td>

                        @if (we.Eccentric)
                        {
                            <td>
                                Eccentric @we.Exercise.Name
                            </td>
                        }
                        else
                        {
                            <td>@we.Exercise.Name</td>
                        }

                        <td><button class="btn btn-danger" @onclick="(x => DeleteWorkoutExercise(we))">Delete</button></td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <button class="btn btn-warning" @onclick="() => Modal.Open()">Add Exercise</button>
    <NavLink class="btn btn-success" href="@GetExercisesUrl(Id)" @onclick="SaveWorkout">Save</NavLink>
    <NavLink class="btn btn-primary float-right" href="@GetExercisesUrl(Id)">Back</NavLink>
    <br /><br />
</div>

@code {

    [Inject]
    public IWorkoutRepository repo { get; set; }

    [Parameter]
    public long Id { get; set; }

    public List<Workout_Exercise> Workout_ExerciseData { get; set; }

    public int curIndex;

    private ExerciseFormComponent Modal { get; set; }

    public Workout workout { get; set; }
    public Day day { get; set; }
    public List<Day> days { get; set; }
    public Day newDay { get; set; }

    protected async override Task OnInitializedAsync()
    {
        workout = repo.Workouts.First(w => w.WorkoutID == Id);
        day = repo.Days.First(d => d.DayID == workout.DayID);
        await UpdateData();
    }

    public async Task UpdateData()
    {
        Workout_ExerciseData = await repo.Workout_Exercises
                    .Include(e => e.Exercise)
                    .Where(we => we.WorkoutID == Id)
                    .OrderBy(we => we.ExerciseNum)
                    .ToListAsync();
        days = await repo.Days.ToListAsync();
    }

    public void StartDrag(Workout_Exercise we)
    {
        curIndex = GetIndex(we);
    }

    public void ClickItem(Workout_Exercise we)
    {
        curIndex = GetIndex(we);
    }

    public int GetIndex(Workout_Exercise we)
    {
        return Workout_ExerciseData.First(w => w.WorkoutExerciseID == we.WorkoutExerciseID).ExerciseNum - 1;
    }

    public void Drop(Workout_Exercise we)
    {
        if(we != null)
        {
            var index = GetIndex(we);
            var current = Workout_ExerciseData[curIndex];

            Workout_ExerciseData.RemoveAt(curIndex);
            Workout_ExerciseData.Insert(index, current);

            for(int i = 0; i < Workout_ExerciseData.Count(); i++)
            {
                Workout_ExerciseData[i].ExerciseNum = i + 1;
            }

            curIndex = index;

            StateHasChanged();
        }
    }

    public string GetExercisesUrl(long id) => $"/workouts/exercises/{id}";

    public void SaveWorkout()
    {
        foreach(Workout_Exercise we in Workout_ExerciseData)
        {
            repo.SaveWorkoutExercises(we);
        }
        workout.DayID = day.DayID;
        workout.Day = day;
        repo.SaveWorkout(workout);
    }

    public void RefreshState()
    {
        workout.DayID = day.DayID;
        workout.Day = day;
        repo.SaveWorkout(workout);
        NavigationManager.NavigateTo($"workouts/edit/{Id}", true);
    }

    public void DeleteWorkoutExercise(Workout_Exercise we)
    {
        repo.DeleteWorkoutExercises(we);
        if(we.ExerciseNum < Workout_ExerciseData.Count())
        {
            for (int i = 0; i < Workout_ExerciseData.Count(); i++)
            {
                if (i + 1 == we.ExerciseNum)
                {
                    Workout_ExerciseData[i].ExerciseNum = i + 1;
                }
                else if(i + 1 > we.ExerciseNum)
                {
                    Workout_ExerciseData[i].ExerciseNum = i + 2;
                }
            }
        }
        RefreshState();
    }

    public void changeDay(ChangeEventArgs args)
    {
        int dayid = Convert.ToInt32(args.Value);
        day = repo.Days.First(d => d.DayID == dayid);
    }

}
